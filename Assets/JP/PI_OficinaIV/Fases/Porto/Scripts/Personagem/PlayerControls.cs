//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PI_OficinaIV/Fases/Porto/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movimentacao"",
            ""id"": ""e6476581-f73d-4807-a620-48666569dff3"",
            ""actions"": [
                {
                    ""name"": ""Moviment"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d87db4aa-501a-45f7-88fa-ce4ab291acdc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""95e6c680-7cd3-456e-b058-07d136711a7e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moviment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""766a47dc-e12a-4d2f-bbeb-a148eb0247d9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moviment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""360d0f25-fd21-40b4-b92e-2ce798d6b45b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moviment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e8933706-ad22-497c-9071-808198da9431"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moviment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dc60f6d5-e6f4-4cc3-9588-a61c93f94774"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moviment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movimentacao
        m_Movimentacao = asset.FindActionMap("Movimentacao", throwIfNotFound: true);
        m_Movimentacao_Moviment = m_Movimentacao.FindAction("Moviment", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movimentacao
    private readonly InputActionMap m_Movimentacao;
    private List<IMovimentacaoActions> m_MovimentacaoActionsCallbackInterfaces = new List<IMovimentacaoActions>();
    private readonly InputAction m_Movimentacao_Moviment;
    public struct MovimentacaoActions
    {
        private @PlayerControls m_Wrapper;
        public MovimentacaoActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moviment => m_Wrapper.m_Movimentacao_Moviment;
        public InputActionMap Get() { return m_Wrapper.m_Movimentacao; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovimentacaoActions set) { return set.Get(); }
        public void AddCallbacks(IMovimentacaoActions instance)
        {
            if (instance == null || m_Wrapper.m_MovimentacaoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovimentacaoActionsCallbackInterfaces.Add(instance);
            @Moviment.started += instance.OnMoviment;
            @Moviment.performed += instance.OnMoviment;
            @Moviment.canceled += instance.OnMoviment;
        }

        private void UnregisterCallbacks(IMovimentacaoActions instance)
        {
            @Moviment.started -= instance.OnMoviment;
            @Moviment.performed -= instance.OnMoviment;
            @Moviment.canceled -= instance.OnMoviment;
        }

        public void RemoveCallbacks(IMovimentacaoActions instance)
        {
            if (m_Wrapper.m_MovimentacaoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovimentacaoActions instance)
        {
            foreach (var item in m_Wrapper.m_MovimentacaoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovimentacaoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovimentacaoActions @Movimentacao => new MovimentacaoActions(this);
    public interface IMovimentacaoActions
    {
        void OnMoviment(InputAction.CallbackContext context);
    }
}
